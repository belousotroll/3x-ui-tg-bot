# handlers.py
import io
import qrcode
from logger import api_logger as logger
from telebot import types
from bot import bot
from api_client import add_client, get_connection_string

kb = types.InlineKeyboardMarkup()
kb.add(types.InlineKeyboardButton(text="üì± –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥", callback_data="get_qr"))
kb.add(types.InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏", callback_data="get_info"))

@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message) -> None:
    user_id = message.chat.id
    username = message.from_user.username or "[[unknown]]"
    logger.info(f'Incoming command /start from user_id={user_id} and username={username}')
    bot.send_chat_action(message.chat.id, "typing")
    if add_client(user_id, username):
        bot.send_message(
            message.chat.id,
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=kb
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.callback_query_handler(func=lambda call: call.data == "get_qr")
def send_qr(call: types.CallbackQuery) -> None:
    user_id = call.message.chat.id
    logger.info(f'Incoming command /get_qr from user_id={user_id}')

    conn_str = get_connection_string(user_id)
    if conn_str is None:
        bot.send_message(
            call.message.chat.id,
            "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. "
            "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
        )
        bot.answer_callback_query(call.id)
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    img = qrcode.make(conn_str)
    buf = io.BytesIO()
    buf.name = 'qrcode.png'
    img.save(buf, 'PNG')
    buf.seek(0)

    bot.send_photo(call.message.chat.id, photo=buf)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "get_info")
def send_info(call: types.CallbackQuery) -> None:
    user_id = call.message.chat.id
    logger.info(f'Incoming command /get_info from user_id={user_id}')
    bot.send_message(call.message.chat.id, "‚ÑπÔ∏è –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.")
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: True)
def fallback(message: types.Message) -> None:
    bot.send_message(
        message.chat.id,
        "–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=kb
    )
