from handlers import *
from api_client import *
from logger import api_logger as logger
from telebot import types
from bot import bot

@bot.message_handler(commands=["admin"])
def cmd_admin(message: types.Message) -> None:
    user_id = message.chat.id
    # @todo: move validation to query handler

    if is_admin(user_id):
        bot.send_message(user_id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    requests = load_approval_requests()
    users = load_approved_users()

    lines = []
    if requests:
        lines.append("**–û–∂–∏–¥–∞—é—Ç:**")
        for r in requests:
            lines.append(f"- @{r['username']} (ID: {r['user_id']})")
    if users:
        lines.append("**–û–¥–æ–±—Ä–µ–Ω—ã:**")
        for a in users:
            lines.append(f"- @{a['username']} (ID: {a['user_id']})")
    text = "\n".join(lines) if lines else "–ó–∞—è–≤–æ–∫ –Ω–µ—Ç"

    markup = types.InlineKeyboardMarkup()
    for r in requests:
        uid = r['user_id']
        markup.add(
            types.InlineKeyboardButton(
                text=f"–û–¥–æ–±—Ä–∏—Ç—å @{r['username']}",
                callback_data=f"approve:{uid}"
            )
        )
    bot.send_message(user_id, text, reply_markup=markup, parse_mode="Markdown")


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("approve:"))
def handle_approve(call: types.CallbackQuery) -> None:
    caller_id = call.from_user.id
    if not is_admin(caller_id):
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    _, uid = call.data.split(":", 1)
    user_id = int(uid)

    requests = load_approval_requests()
    req = next((r for r in requests if r['user_id'] == user_id), None)
    if not req:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        return

    username = req['username']
    if add_client(user_id, username):
        users = load_approved_users()
        users.append(req)
        save_approved_users(users)
        logger.info(f"Approved user {user_id} by admin {caller_id}")
        bot.send_message(
            user_id,
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",
            reply_markup=make_user_keyboard()
        )
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω")
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ API", show_alert=True)

    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
    remaining = [r for r in requests if r['user_id'] != user_id]
    save_approval_requests(remaining)


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("reject:"))
def handle_reject(call: types.CallbackQuery) -> None:
    caller_id = call.from_user.id
    if not is_admin(caller_id):
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    _, uid = call.data.split(":", 1)
    user_id = int(uid)

    requests = load_approval_requests()
    req = next((r for r in requests if r['user_id'] == user_id), None)
    if not req:
        bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        return

    username = req['username']
    bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    bot.send_message(
        caller_id,
        f"üóëÔ∏è –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (id={user_id})"
    )
    bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    logger.info(f"Rejected user {user_id} by admin {caller_id}")

    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
    remaining = [r for r in requests if r['user_id'] != user_id]
    save_approval_requests(remaining)